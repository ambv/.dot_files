{
    "ruff.nativeServer": "on",
    "python.analysis.typeCheckingMode": "basic",
    "editor.fontFamily": "TerminusTTF",
    "editor.quickSuggestions": {
        "other": false,
        "comments": false,
        "strings": false
    },
    "editor.find.autoFindInSelection": "multiline",
    "[python]": {
        "editor.rulers": [
            88
        ],
        "editor.formatOnType": true,
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.tabSize": 4,
        "editor.insertSpaces": true
    },
    "[restructuredtext]": {
        "editor.rulers": [72]
    },
    "[markdown]": {
        "editor.rulers": [72]
    },
    "[lua]": {
        "editor.tabSize": 2
    },
    "git.autofetch": true,
    "mypy.runUsingActiveInterpreter": true,
    "python.testing.unittestEnabled": true,
    "explorer.confirmDragAndDrop": false,
    "workbench.editor.showTabs": "multiple",
    "editor.minimap.renderCharacters": false,
    "editor.minimap.enabled": false,
    "editor.tabCompletion": "onlySnippets",
    "editor.autoClosingBrackets": "never",
    "git.confirmSync": false,
    "python.venvFolders": [
        "~/.venvs"
    ],
    "workbench.preferredDarkColorTheme": "Chromodynamics Delek",
    "files.associations": {
        "*.json": "jinja-json"
    },
    "editor.autoClosingQuotes": "never",
    "editor.renderWhitespace": "all",
    "cSpell.userWords": [
        "Ableton",
        "aiter",
        "ambv",
        "anext",
        "asyncio",
        "centos",
        "chdir",
        "cpython",
        "ctypes",
        "dataclass",
        "dateutil",
        "distro",
        "dtype",
        "edgedb",
        "edgeql",
        "ENOENT",
        "errorcode",
        "favicon",
        "getfilesystemencoding",
        "grafana",
        "iter",
        "itertools",
        "keepends",
        "langa",
        "llanga",
        "lukasz",
        "≈Åukasz",
        "macos",
        "matplotlib",
        "modalcommands",
        "modaledit",
        "mypy",
        "ndarray",
        "po",
        "polyend",
        "pycache",
        "pydantic",
        "pygame",
        "pyscript",
        "pytest",
        "rpartition",
        "scandir",
        "scipy",
        "starlette",
        "ukasz",
        "unparse",
        "uvlo",
        "uvloop",
        "virtualenv",
        "xenial"
    ],
    "editor.fontSize": 14,
    "debug.console.fontSize": 14,
    "terminal.integrated.fontSize": 14,
    "python.languageServer": "Jedi",
    "workbench.startupEditor": "newUntitledFile",
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    "python.defaultInterpreterPath": "/Users/ambv/.virtualenvs/vscode-default",
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    "editor.accessibilitySupport": "off",
    "security.workspace.trust.untrustedFiles": "open",
    "editor.tabSize": 4,
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "editor.indentSize": "tabSize",
    "git.openRepositoryInParentFolders": "always",
    "C_Cpp.experimentalFeatures": "enabled",
    "C_Cpp.loggingLevel": "Information",
    "settings.cycle": [
        {
            "id": "gitblameOff",
            "overrideWorkspaceSettings": false,
            "values": [
                {
                    "git.blame.editorDecoration.enabled": false
                }
            ]
        },
        {
            "id": "gitblameOn",
            "overrideWorkspaceSettings": false,
            "values": [
                {
                    "git.blame.editorDecoration.enabled": true
                }
            ]
        }
    ],
    "macros": {
        "normal": [
            "settings.cycle.gitblameOn",
            "modaledit.enterNormal"
        ]
    },
    "modaledit.keybindings": {
        "0": {
            "command": "cursorMove",
            "args": "{ to: 'wrappedLineStart', select: __selecting }"
        },
        "\n": [
            "cursorDown",
            {
                "command": "cursorMove",
                "args": {
                    "to": "wrappedLineFirstNonWhitespaceCharacter"
                }
            }
        ],
        " ": "cursorRight",
        "h": "cursorLeft",
        "j": "cursorDown",
        "k": "cursorUp",
        "l": "cursorRight",
        "$": {
            "command": "cursorMove",
            "args": "{ to: 'wrappedLineEnd', select: __selecting }"
        },
        "^": {
            "command": "cursorMove",
            "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
        },
        "g": {
            "_": {
                "command": "cursorMove",
                "args": "{ to: 'wrappedLineLastNonWhitespaceCharacter', select: __selecting }"
            },
            "g": {
                "condition": "__selecting",
                "true": "cursorTopSelect",
                "false": "cursorTop"
            },
            "J": [
                "editor.action.joinLines",
                "deleteRight"
            ],
            "u,U": {
                "id": 1,
                "help": "Change case with motion",
                "u,U": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: __cmd.slice(0, -3) + 'V' + __rcmd[0] }"
                },
                "h,j,k,l,w,e,b,W,B,%": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __cmd.slice(0, -3) + __rcmd[0] + __rcmd[1] }"
                },
                "^,$,0,G,H,M,L": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[0] + __rcmd[1] }"
                },
                "g": {
                    "g,_": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                },
                "f,t,F,T": {
                    "help": "Do until _",
                    " -~": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                },
                "a,i": {
                    "help": "Do around/inside _",
                    "w,p,b,B,t, -/,:-@,[-`,{-~": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                },
                "`,'": {
                    "help": "Do until mark _",
                    "a-z": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                }
            },
            "t": "workbench.action.nextEditor",
            "T": "workbench.action.previousEditor",
            "o": "editor.action.insertLineAfter",
            "O": "editor.action.insertLineBefore"
        },
        "G": {
            "condition": "__selecting",
            "true": "cursorBottomSelect",
            "false": "cursorBottom"
        },
        "w": "cursorWordStartRight",
        "e": "cursorWordEndRight",
        "b": "cursorWordStartLeft",
        "W": {
            "command": "cursorWordStartRight",
            "repeat": "__char.match(/\\W/)"
        },
        "B": {
            "command": "cursorWordStartLeft",
            "repeat": "__char.match(/\\W/)"
        },
        "H": {
            "command": "cursorMove",
            "args": "{ to: 'viewPortTop', select: __selecting }"
        },
        "M": {
            "command": "cursorMove",
            "args": "{ to: 'viewPortCenter', select: __selecting }"
        },
        "L": {
            "command": "cursorMove",
            "args": "{ to: 'viewPortBottom', select: __selecting }"
        },
        "%": {
            "condition": "__selecting",
            "true": "editor.action.smartSelect.expand",
            "false": "editor.action.jumpToBracket"
        },
        "f": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "typeAfterAccept": "hv",
                "typeBeforeNextMatch": "l",
                "typeAfterNextMatch": "hv",
                "typeAfterPreviousMatch": "v"
            }
        },
        "F": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "typeAfterAccept": "v",
                "typeAfterNextMatch": "v",
                "typeBeforePreviousMatch": "l",
                "typeAfterPreviousMatch": "hv"
            }
        },
        "t": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "typeAfterAccept": "hhv",
                "typeBeforeNextMatch": "ll",
                "typeAfterNextMatch": "hhv",
                "typeBeforePreviousMatch": "h",
                "typeAfterPreviousMatch": "lv"
            }
        },
        "T": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "typeAfterAccept": "lv",
                "typeBeforeNextMatch": "h",
                "typeAfterNextMatch": "lv",
                "typeBeforePreviousMatch": "ll",
                "typeAfterPreviousMatch": "hhv"
            }
        },
        ";": "modaledit.nextMatch",
        ",": "modaledit.previousMatch",
        "m": {
            "help": "Define mark _",
            "a-z": {
                "command": "modaledit.defineBookmark",
                "args": "{ bookmark: __rcmd[0] }"
            }
        },
        "`": {
            "a-z": {
                "command": "modaledit.goToBookmark",
                "args": "{ bookmark: __rcmd[0], select: __selecting }"
            }
        },
        "'": {
            "a-z": [
                {
                    "command": "modaledit.goToBookmark",
                    "args": "{ bookmark: __rcmd[0], select: __selecting }"
                },
                {
                    "command": "cursorMove",
                    "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
                }
            ]
        },
        "i": [
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "I": [
            "cursorHome",
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "a": [
            {
                "condition": "__char == ''",
                "false": "cursorRight"
            },
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "A": [
            "cursorEnd",
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "o": [
            "editor.action.insertLineAfter",
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "O": [
            "editor.action.insertLineBefore",
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "v": "modaledit.toggleSelection",
        "V": [
            {
                "command": "cursorMove",
                "args": {
                    "to": "wrappedLineStart"
                }
            },
            "modaledit.toggleSelection",
            "cursorDownSelect"
        ],
        // ambv: I don't want those useless commands
        // "x": "deleteRight",  <-- this one will be a chord
        // "X": "deleteLeft",   <-- this one I will replace with a D equivalent below
        "D": [
            "modaledit.cancelSelection",
            "cursorEndSelect",
            "deleteRight",
            "modaledit.cancelSelection"
        ],
        "r,s": [
            "deleteRight",
            "modaledit.enterInsert",
            "settings.cycle.gitblameOff"
        ],
        "S": {
            "command": "modaledit.typeNormalKeys",
            "args": {
                "keys": "cc"
            }
        },
        "X": [
            "modaledit.cancelSelection",
            "cursorEndSelect",
            "editor.action.clipboardCopyAction",
            "deleteRight",
            "modaledit.cancelSelection"
        ],
        "C": {
            "command": "modaledit.typeNormalKeys",
            "args": {
                "keys": "Di"
            }
        },
        "Y": [
            "modaledit.cancelSelection",
            "cursorEndSelect",
            "editor.action.clipboardCopyAction",
            "modaledit.cancelSelection"
        ],
        "p": {
            "command": "modalcommands.vimPaste",
            "args": {
                "before": false
            }
        },
        "P": {
            "command": "modalcommands.vimPaste",
            "args": {
                "before": true
            }
        },
        "J": "editor.action.joinLines",
        "u": [
            "undo",
            "modaledit.cancelSelection"
        ],
        ".": "modaledit.repeatLastChange",
        // ambv: added 'x' to those chords
        "x,d,y,c,<,>,=": {
            "id": 2,
            "help": "Edit with motion",
            "x,d,y,c,<,>,=": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: __cmd.slice(0, -2) + 'V' + (__rcmd[0] =='c' ? 'dO' : __rcmd[0]) }"
            },
            "h,j,k,l,w,e,b,W,B,%": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: 'v' + __cmd.slice(0, -2) + __rcmd[0] + __rcmd[1] }"
            },
            "^,$,0,G,H,M,L": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: 'v' + __rcmd[0] + __rcmd[1] }"
            },
            "g": {
                "g,_": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            },
            "f,t,F,T": {
                "help": "Do until _",
                " -~": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            },
            "a,i": {
                "help": "Do around/inside _",
                "w,p,b,B,t, -/,:-@,[-`,{-~": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            },
            "`,'": {
                "help": "Do until mark _",
                "a-z": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            }
        },
        "1-9": {
            "id": 3,
            "help": "Repeat / go to line",
            "0-9": 3,
            "h,j,k,l,w,e,b,W,B,u,%": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: __rcmd[0] }",
                "repeat": "parseInt(__cmd)"
            },
            "v": {
                "command": "cursorRightSelect",
                "repeat": "parseInt(__cmd)"
            },
            "V": {
                "command": "expandLineSelection",
                "repeat": "parseInt(__cmd)"
            },
            "s": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: parseInt(__cmd) + 'vc' }"
            },
            "S": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: parseInt(__cmd) + 'cc' }"
            },
            "J": [
                {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: parseInt(__cmd) + 'VJ' }"
                },
                "modaledit.cancelSelection"
           ],
           // ambv: "G" will open the standard gotoLine workflow which requires
           //       Enter to confirm. "gg" only works properly when "Scroll
           //       beyond last line" is enabled.
           "G": [
                {
                    "command": "workbench.action.quickOpen",
                    "args": "':' + parseInt(__cmd)"
                }
            ],
            "g": {
                "g": [
                    {
                        // Not sure why this needs +4 but it started going out of sync
                        // a while back. This workaround is easier than figuring out what
                        // changed in the VScode extension API.
                        "command": "revealLine",
                        "args": "{ lineNumber: parseInt(__cmd) + 4, at: 'top' }"
                    },
                    {
                        "command": "cursorMove",
                        "args": {
                            "to": "viewPortTop"
                        }
                    },
                    {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'zz' }"
                    }
                ],
                "J": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: __cmd.slice(-2) }",
                    "repeat": "parseInt(__cmd)"
                },
                "u,U": 1
            },
            "d,c,y,<,>,=": 2
        },
        "/": [
            {
                "command": "modaledit.search",
                "args": {
                    "caseSensitive": true,
                    "wrapAround": true
                }
            }
        ],
        "?": {
            "command": "modaledit.search",
            "args": {
                "backwards": true,
                "caseSensitive": true,
                "wrapAround": true
            }
        },
        "n": "modaledit.nextMatch",
        "N": "modaledit.previousMatch",
        ":": {
            "help": "digits: go to line, other: command",
            "\n": "workbench.action.showCommands",
            "1-9": {
                "command": "workbench.action.quickOpen",
                "args": "__cmd"
            },
            "a-z": {
                "command": "workbench.action.quickOpen",
                "args": "'>' + __cmd[1]"
            }
        },
        "z": {
            "z": {
                "command": "revealLine",
                "args": "{ lineNumber: __line, at: 'center' }"
            }
        },
        "Z": {
            "help": "Z - Close and save, Q - Close without saving",
            "Z": [
                "workbench.action.files.save",
                "workbench.action.closeActiveEditor"
            ],
            "Q": "workbench.action.closeActiveEditor"
        }
    },
    "modaledit.selectbindings": {
        "l": "cursorRightSelect",
        "h": "cursorLeftSelect",
        "j": "cursorDownSelect",
        "k": "cursorUpSelect",
        "w": "cursorWordStartRightSelect",
        "e": "cursorWordEndRightSelect",
        "b": "cursorWordStartLeftSelect",
        "W": {
            "command": "cursorWordStartRightSelect",
            "repeat": "__char.match(/\\W/)"
        },
        "B": {
            "command": "cursorWordStartLeftSelect",
            "repeat": "__char.match(/\\W/)"
        },
        "f": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "selectTillMatch": true
            }
        },
        "F": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "selectTillMatch": true
            }
        },
        "t": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "typeAfterAccept": "h",
                "typeBeforeNextMatch": "l",
                "typeAfterNextMatch": "h",
                "typeBeforePreviousMatch": "h",
                "typeAfterPreviousMatch": "l",
                "selectTillMatch": true
            }
        },
        "T": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "typeAfterAccept": "l",
                "typeBeforeNextMatch": "h",
                "typeAfterNextMatch": "l",
                "typeBeforePreviousMatch": "l",
                "typeAfterPreviousMatch": "h",
                "selectTillMatch": true
            }
        },
        "a,i": {
            "help": "Select around/inside _",
            "w": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '\\\\W', to: '\\\\W', regex: true, inclusive: __rcmd[1] == 'a' }"
                }
            ],
            "p": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '(?<=\\\\r?\\\\n)\\\\s*\\\\r?\\\\n', to: '(?<=\\\\r?\\\\n)\\\\s*\\\\r?\\\\n', regex: true, inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            " -/,:-@,[-`,{-~": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: __rcmd[0], to: __rcmd[0], inclusive: __rcmd[1] == 'a' }"
                }
            ],
            "(,),b": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '(', to: ')', inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            "{,},B": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '{', to: '}', inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            "[,]": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '[', to: ']', inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            "<,>,t": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '<', to: '>', inclusive: __rcmd[1] == 'a' }"
                }
            ]
        },
        "g": {
            "q": {
                "command": "rewrap.rewrapComment",
            }
        },
        ">": [
            "editor.action.indentLines",
            "modaledit.cancelSelection"
        ],
        "<": [
            "editor.action.outdentLines",
            "modaledit.cancelSelection"
        ],
        "=": [
            "editor.action.formatSelection",
            "modaledit.cancelSelection"
        ],
        // ambv: x cuts, d deletes without copying
        "x": [
            "editor.action.clipboardCopyAction",
            "deleteRight",
            "modaledit.cancelSelection"
        ],
        "d": [
            "deleteRight",
            "modaledit.cancelSelection"
        ],
        "c": [
            "editor.action.clipboardCopyAction",
            "deleteRight",
            "modaledit.enterInsert"
        ],
        "y": [
            "editor.action.clipboardCopyAction",
            "modaledit.cancelSelection"
        ],
        "u": [
            "editor.action.transformToLowercase",
            "modaledit.cancelSelection"
        ],
        "U": [
            "editor.action.transformToUppercase",
            "modaledit.cancelSelection"
        ]
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "ruff.logLevel": "warn",
    "cSpell.ignoreWords": [
        "LANCZOS"
    ],
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "go.toolsManagement.autoUpdate": true,
    "luahelper.base.formatErrShow": true,
    "workbench.editor.empty.hint": "hidden",
    "redhat.telemetry.enabled": true,
    "xml.server.vmargs": "-Xmx512M",
    "xml.symbols.maxItemsComputed": 1000000,
    "workbench.layoutControl.enabled": false,
    "powershell.powerShellAdditionalExePaths": {
        "HomeBrew": "/opt/homebrew/bin/pwsh"
    },
    "powershell.powerShellDefaultVersion": "HomeBrew",
    "cmake.showOptionsMovedNotification": false,
    "githubPullRequests.pullBranch": "never",
    "gitlens.advanced.messages": {
        "suppressIntegrationDisconnectedTooManyFailedRequestsWarning": true,
        "suppressIntegrationRequestTimedOutWarning": true
    },
    "github.copilot.enable": {
        "*": true,
        "plaintext": false,
        "markdown": false,
        "scminput": false,
        "ini": false,
        "python": false
    },
    "terminal.integrated.scrollback": 10000,
    "workbench.colorTheme": "Chromodynamics Delek",
    "extensions.autoUpdate": false,
    "update.mode": "manual",
    "git.blame.statusBarItem.enabled": false,
    "git-blame.config.showBlameInline": false,
    "git.blame.editorDecoration.enabled": true
}
