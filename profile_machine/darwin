# Mac OS X specific settings

#
# my exports
#

export PATH=/opt/local/sbin:/opt/local/bin:/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin:/opt/local/Library/Frameworks/Python.framework/Versions/3.3/bin:/opt/local/lib/mysql55/bin:/usr/local/bin:/usr/local/sbin:$PATH
export EDITOR="/opt/local/bin/mvim -f"
export VIM_APP_DIR=/Applications/MacPorts/
export QTDIR=/opt/local/lib/qt3
if [[ $TERM_PROGRAM == "iTerm.app" ]]; then
  export TERM=xterm-256color
fi

#
# my aliases
#

alias cvim='/opt/local/bin/vim -XO'
alias ptar='tar --use-compress-program /opt/local/bin/pbzip2 '
alias pgstart="sudo su postgres -c '/opt/local/lib/postgresql83/bin/pg_ctl -D /opt/local/var/db/postgresql83/defaultdb -l /opt/local/var/log/postgresql83/postgres.log start'"
alias pgstop="sudo su postgres -c '/opt/local/lib/postgresql83/bin/pg_ctl -D /opt/local/var/db/postgresql83/defaultdb stop -m fast'"
alias pgstatus="sudo su postgres -c '/opt/local/lib/postgresql83/bin/pg_ctl status -D /opt/local/var/db/postgresql83/defaultdb'"

#
# my functions
#

unalias vim
function vim {
# this handles cases where no file is expected or 
# unnecessary E247 errors at first MacVim startup
# or when there is no MacVim window open
  if [[ ! -z $BASH ]]; then
    echo "The 'vi' function is incompatible with Bash. Use 'mvim' directly."
    return
  fi
  cmd_line=()
  if [[ -z `mvim --serverlist` ]]; then
    mvim -XO1 $@
  else
    remote_given=0
    for arg in "$@"; do
        arg_is_file=0
        if [[ $remote_given -eq 0 ]] && [[ "$arg" != -* ]]; then
          cmd_line[$(($#cmd_line+1))]="--remote-tab-silent"
          cmd_line[$(($#cmd_line+1))]=$arg
          remote_given=1
        elif [[ "$arg" != "--" ]]; then
          cmd_line[$(($#cmd_line+1))]=$arg
        fi
    done
    mvim -XO1 $cmd_line
  fi
}

function pro {
    LAST=`pwd`
    cd ~/Documents/Projekty
    if [[ -d "$@" ]]; then
        cd "$@"
        wintitle "$@"
        if [[ -f .pro ]]; then
            source .pro
        else
            if [[ -d project ]]; then
                cd project
                lt 2
            else
                lt 1
            fi
            echo
            git config --get remote.origin.url
            git status -s 2>/dev/null
            hg status 2>/dev/null
            todo-list
        fi
    elif [[ "$@" == "" ]]; then
        lt 1
    else
        echo "No such project: $@"
        lt 1
        cd $LAST 
    fi
}

function propy {
    LAST=`pwd`
    cd ~/Documents/Projekty/Python
    if [[ -d "$@" ]]; then
        cd "$@"
        wintitle "$@"
        if [[ -f bin/activate ]]; then
            which deactivate >/dev/null && deactivate
            source bin/activate
        fi
        if [[ -f .propy ]]; then
            source .propy
        else
            if [[ -d project ]]; then
                cd project
                lt 4 -I ".venv*" -I ".tox"
            else
                lt 3 -I ".venv*" -I ".tox"
            fi
            echo
            git config --get remote.origin.url
            git status -s 2>/dev/null
            hg status 2>/dev/null
            todo-list --python
        fi
    elif [[ "$@" == "" ]]; then
        lt 1
    else
        echo "No such project: $@"
        lt 1
        cd $LAST 
    fi
}
alias pp='propy'
