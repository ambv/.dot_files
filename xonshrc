#!/usr/bin/env xonsh

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if False:
    import sys as _sys
    from types import ModuleType as _ModuleType
    _mod = _ModuleType("xontrib.conda",
                    "Autogenerated from $(/Users/ambv/opt/anaconda3/bin/conda shell.xonsh hook)")
    __xonsh__.execer.exec($("/Users/ambv/opt/anaconda3/bin/conda" "shell.xonsh" "hook"),
                        glbs=_mod.__dict__,
                        filename="$(/Users/ambv/opt/anaconda3/bin/conda shell.xonsh hook)")
    _sys.modules["xontrib.conda"] = _mod
    del _sys, _mod, _ModuleType
# <<< conda initialize <<<

import os
PID = str(os.getpid())
$TITLE="{cwd} | " + PID

from pathlib import Path
HOME = Path($HOME)
VIRTUALENVS = HOME / ".virtualenvs"
$PATH = [
        HOME / ".dot_files/bin",
        HOME / ".poetry/bin",
        HOME / ".cargo/bin",
        HOME / ".local/bin",
        "/Library/TeX/texbin",
        "/opt/homebrew/bin",
        HOME / "Library/Application Support/edgedb/bin",
        HOME / "opt/anaconda3/condabin",
        "/usr/local/opt/autoconf@2.69/bin",
        "/usr/local/bin",
] + $PATH

$PYENV_ROOT=HOME / ".pyenv"
$POETRY_VIRTUALENVS_PATH=HOME / ".virtualenvs"
$XONSH_HISTORY_BACKEND='sqlite'
$XONSH_HISTORY_SIZE=(1000000, 'commands')  # Keep 1 million commands instead of default 8128
$XONSH_HISTORY_IGNORE_REGEX = r'^(git status|lla?|ls -la?|cd \.\.)$'  # Don't record these frequent commands
$CLICOLOR="1"
$DEBEMAIL="lukasz@langa.pl"
$DEBFULLNAME="Łukasz Langa (GPG langa.pl)"
$DOCKER_DEFAULT_PLATFORM="linux/amd64"
$EDITOR="hx"
$LSCOLORS="ExFxCxDxBxegedabagacad"
# LS_COLORS is only used by GNU ls and Eza. Eza's got its own colors.
# $LS_COLORS="no\x3d00\x3afi\x3d00\x3adi\x3d01\x3b34\x3aln\x3d01\x3b35\x3api\x3d40\x3b33\x3aso\x3d01\x3b35\x3abd\x3d40\x3b33\x3b01\x3acd\x3d40\x3b33\x3b01\x3aor\x3d01\x3b05\x3b37\x3b41\x3ami\x3d01\x3b05\x3b37\x3b41\x3aex\x3d01\x3b32\x3a\x2a\x2ecmd\x3d01\x3b32\x3a\x2a\x2eexe\x3d01\x3b32\x3a\x2a\x2ecom\x3d01\x3b32\x3a\x2a\x2ebtm\x3d01\x3b32\x3a\x2a\x2ebat\x3d01\x3b32\x3a\x2a\x2esh\x3d01\x3b32\x3a\x2a\x2ecsh\x3d01\x3b32\x3a\x2a\x2etar\x3d01\x3b31\x3a\x2a\x2etgz\x3d01\x3b31\x3a\x2a\x2earj\x3d01\x3b31\x3a\x2a\x2etaz\x3d01\x3b31\x3a\x2a\x2elzh\x3d01\x3b31\x3a\x2a\x2ezip\x3d01\x3b31\x3a\x2a\x2ez\x3d01\x3b31\x3a\x2a\x2eZ\x3d01\x3b31\x3a\x2a\x2egz\x3d01\x3b31\x3a\x2a\x2ebz2\x3d01\x3b31\x3a\x2a\x2ebz\x3d01\x3b31\x3a\x2a\x2etz\x3d01\x3b31\x3a\x2a\x2erpm\x3d01\x3b31\x3a\x2a\x2ecpio\x3d01\x3b31\x3a\x2a\x2ejpg\x3d01\x3b35\x3a\x2a\x2egif\x3d01\x3b35\x3a\x2a\x2ebmp\x3d01\x3b35\x3a\x2a\x2exbm\x3d01\x3b35\x3a\x2a\x2expm\x3d01\x3b35\x3a\x2a\x2epng\x3d01\x3b35\x3a\x2a\x2etif\x3d01\x3b35\x3a"
$LS_COLORS=""
$EZA_CONFIG_DIR="/Users/ambv/.config/eza"
$PIP_REQUIRE_VIRTUALENV="true"
$PYTHONSTARTUP=HOME / ".pythonstartup"
$PYTHONWARNINGS="i"
$TZ="Europe/Warsaw"
$VIMFILES=HOME / ".vim"
$XONSH_SHOW_TRACEBACK="true"
$XONSH_TRACEBACK_LOGFILE="/tmp/xonsh-traceback"
$XONTRIB_HIST_NAVIGATOR_TRUNCATE="true"

xontrib load vox  # like virtualfish

def wintitle(args):
    $TITLE=" ".join(args) + " | " + PID

import subprocess as subprocess_raw
from xonsh.api import subprocess as subprocess_xsh
eza_cmdline_default = [
    "/opt/homebrew/bin/eza",
    "-l",
    "--smart-group",
    "--git",
    "--git-ignore",
    "--grid",
    "--color-scale-mode=gradient",
    "--color-scale=all",
    "--color=always",
]
eza_cmdline_all = [
    "/opt/homebrew/bin/eza",
    "-l",
    "--smart-group",
    "--git",
    "--color-scale-mode=gradient",
    "--color-scale=all",
    "--color=always",
    "-a",
    # "-@",
]
def eza_ll_with_fallback(args):
    env = os.environ.copy()
    env["EZA_CONFIG_DIR"] = $EZA_CONFIG_DIR
    out = subprocess_raw.run(eza_cmdline_default + args, capture_output=True, env=env, encoding="UTF-8").stdout
    if out.strip():
        print(out)
        return

    # print("No output. Retrying with -a and without pruning .gitignore...")
    subprocess_xsh.run(eza_cmdline_all + args)

def crontab_editor(args):
    env = os.environ.copy()
    env["EDITOR"] = "vim"
    subprocess_raw.run(["crontab"] + args, env=env)

aliases["ci"] = "echo", "You probably meant vi. Or are you still using RCS?"
aliases["cp"] = "/bin/cp", "-iR"
aliases["dc"] = "echo", "You don't really use 'dc', do you?"
aliases["dk"] = "docker"
aliases["dkl"] = "docker container ls -a && docker image ls -a"
aliases["dke"] = "docker exec -it"
aliases["ll"] = eza_ll_with_fallback
aliases["lla"] = eza_cmdline_all
aliases["lt"] = "/opt/homebrew/bin/tree",  "-AphL"
aliases["mv"] = "/bin/mv", "-i"
aliases["rm"] = "/bin/rm", "-i"
aliases["tree"] = "/opt/homebrew/bin/tree", "-A"
aliases["vi"] = "vim"
aliases["vf"] = "vox"
aliases["wintitle"] = wintitle
aliases["zed"]="/Applications/Zed.app/Contents/MacOS/cli"
aliases["crontab"] = crontab_editor

xontrib load autovox
# xontrib load coreutils  -- faster, but change uptime into a float
xontrib load hist_navigator
xontrib load fish_completer
xontrib load term_integration
# xontrib load pyenv

@events.autovox_policy
def dotvenv_policy(path, **_):
    # behave like virtualfish
    venv = path / '.venv'
    if venv.is_dir():
        return venv
    elif venv.is_file():
        return VIRTUALENVS / venv.read_text().strip()

# from pathlib import Path
@events.on_chdir
def maybe_autorun(olddir, newdir, **kwargs):
    auto_file = Path(newdir) / '.local' / 'auto.xsh'
    if auto_file.is_file():
        print("Running auto.xsh")
        source @(auto_file)

xonsh_local = HOME / ".xonshrc.local"
if xonsh_local.exists():
    execx(xonsh_local.read_text())
del xonsh_local

import oblique
strategies = oblique.get_strategies({1,2,3,4}, python=True, five_rings=True, extra=True, attribution=True)
print(oblique.koan_of_the_day(strategies))
del oblique

execx($(starship init xonsh))
